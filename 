[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..e10e727[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/.metadata/[m
[1mdiff --git a/helloWorld/.classpath b/helloWorld/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..ac37fb2[m
[1m--- /dev/null[m
[1m+++ b/helloWorld/.classpath[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>[m
[32m+[m	[32m<classpathentry kind="output" path="bin"/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/helloWorld/Hello.java b/helloWorld/Hello.java[m
[1mindex fd4dc9f..ee8fa08 100644[m
[1m--- a/helloWorld/Hello.java[m
[1m+++ b/helloWorld/Hello.java[m
[36m@@ -1,5 +1,7 @@[m
 /**[m
[31m- * This class provides a implementation of the simple print to a String.[m
[32m+[m[32m * Name: helloWorld[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Description: This class provides a implementation of the simple print to a String.[m
  * [m
  * @author: Yandi Sarden[m
  * @author: Leandro Rjbcn[m
[1mdiff --git a/p0001Sum/.classpath b/p0001Sum/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..d54800d[m
[1m--- /dev/null[m
[1m+++ b/p0001Sum/.classpath[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11">[m
[32m+[m		[32m<attributes>[m
[32m+[m			[32m<attribute name="module" value="true"/>[m
[32m+[m		[32m</attributes>[m
[32m+[m	[32m</classpathentry>[m
[32m+[m	[32m<classpathentry kind="src" path="src"/>[m
[32m+[m	[32m<classpathentry kind="output" path="bin"/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/p0001Sum/.gitignore b/p0001Sum/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..ae3c172[m
[1m--- /dev/null[m
[1m+++ b/p0001Sum/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/bin/[m
[1mdiff --git a/p0001Sum/.project b/p0001Sum/.project[m
[1mnew file mode 100644[m
[1mindex 0000000..824c0d2[m
[1m--- /dev/null[m
[1m+++ b/p0001Sum/.project[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<projectDescription>[m
[32m+[m	[32m<name>p0001Sum</name>[m
[32m+[m	[32m<comment></comment>[m
[32m+[m	[32m<projects>[m
[32m+[m	[32m</projects>[m
[32m+[m	[32m<buildSpec>[m
[32m+[m		[32m<buildCommand>[m
[32m+[m			[32m<name>org.eclipse.jdt.core.javabuilder</name>[m
[32m+[m			[32m<arguments>[m
[32m+[m			[32m</arguments>[m
[32m+[m		[32m</buildCommand>[m
[32m+[m	[32m</buildSpec>[m
[32m+[m	[32m<natures>[m
[32m+[m		[32m<nature>org.eclipse.jdt.core.javanature</nature>[m
[32m+[m	[32m</natures>[m
[32m+[m[32m</projectDescription>[m
[1mdiff --git a/p0001Sum/.settings/org.eclipse.jdt.core.prefs b/p0001Sum/.settings/org.eclipse.jdt.core.prefs[m
[1mnew file mode 100644[m
[1mindex 0000000..e256158[m
[1m--- /dev/null[m
[1m+++ b/p0001Sum/.settings/org.eclipse.jdt.core.prefs[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32meclipse.preferences.version=1[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.targetPlatform=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve[m
[32m+[m[32morg.eclipse.jdt.core.compiler.compliance=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.lineNumber=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.localVariable=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.sourceFile=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.assertIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.enumIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.release=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.source=11[m
[1mdiff --git a/p0001Sum/src/p0001sum/Main.java b/p0001Sum/src/p0001sum/Main.java[m
[1mnew file mode 100644[m
[1mindex 0000000..9d7184c[m
[1m--- /dev/null[m
[1m+++ b/p0001Sum/src/p0001sum/Main.java[m
[36m@@ -0,0 +1,53 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class provides a implementation of the simple operation sum.[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m * @author: Leandro Rjbcn[m
[32m+[m[32m * @version: 1.0, 27/05/2020[m
[32m+[m[32m * @since: 1.0 *[m[41m [m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpackage p0001sum;[m
[32m+[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mpublic class Main {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m
[32m+[m		[32m// Variables[m
[32m+[m		[32mScanner scanner = new Scanner(System.in);[m
[32m+[m		[32mint firstNumber = 0;[m
[32m+[m		[32mint secondNumber = 0;[m
[32m+[m		[32mint result = 0;[m
[32m+[m
[32m+[m		[32m// Input[m
[32m+[m		[32mSystem.out.println("==============================================");[m
[32m+[m		[32mSystem.out.println("SUM");[m
[32m+[m		[32mSystem.out.println("The sum between two integers.");[m
[32m+[m		[32mSystem.out.println("==============================================");[m
[32m+[m		[32mSystem.out.println("Number 1:");[m
[32m+[m		[32mfirstNumber = scanner.nextInt();[m
[32m+[m		[32mSystem.out.println("Number 2:");[m
[32m+[m		[32msecondNumber = scanner.nextInt();[m
[32m+[m
[32m+[m		[32m// Process[m
[32m+[m		[32mresult = sum(firstNumber, secondNumber);[m
[32m+[m
[32m+[m		[32m// Output[m
[32m+[m		[32mSystem.out.println("The sum between " + firstNumber + " and " + secondNumber + " is: " + result);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Receive two integers and return the sum between them.[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @param a[m
[32m+[m	[32m * @param b[m
[32m+[m	[32m * @return an integer result of the sum from a and b[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static int sum(int a, int b) {[m
[32m+[m
[32m+[m		[32mreturn (a + b);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/p0002Subtract/.classpath b/p0002Subtract/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..d54800d[m
[1m--- /dev/null[m
[1m+++ b/p0002Subtract/.classpath[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11">[m
[32m+[m		[32m<attributes>[m
[32m+[m			[32m<attribute name="module" value="true"/>[m
[32m+[m		[32m</attributes>[m
[32m+[m	[32m</classpathentry>[m
[32m+[m	[32m<classpathentry kind="src" path="src"/>[m
[32m+[m	[32m<classpathentry kind="output" path="bin"/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/p0002Subtract/.gitignore b/p0002Subtract/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..ae3c172[m
[1m--- /dev/null[m
[1m+++ b/p0002Subtract/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/bin/[m
[1mdiff --git a/p0002Subtract/.project b/p0002Subtract/.project[m
[1mnew file mode 100644[m
[1mindex 0000000..3edc0e8[m
[1m--- /dev/null[m
[1m+++ b/p0002Subtract/.project[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<projectDescription>[m
[32m+[m	[32m<name>p0002Subtract</name>[m
[32m+[m	[32m<comment></comment>[m
[32m+[m	[32m<projects>[m
[32m+[m	[32m</projects>[m
[32m+[m	[32m<buildSpec>[m
[32m+[m		[32m<buildCommand>[m
[32m+[m			[32m<name>org.eclipse.jdt.core.javabuilder</name>[m
[32m+[m			[32m<arguments>[m
[32m+[m			[32m</arguments>[m
[32m+[m		[32m</buildCommand>[m
[32m+[m	[32m</buildSpec>[m
[32m+[m	[32m<natures>[m
[32m+[m		[32m<nature>org.eclipse.jdt.core.javanature</nature>[m
[32m+[m	[32m</natures>[m
[32m+[m[32m</projectDescription>[m
[1mdiff --git a/p0002Subtract/.settings/org.eclipse.jdt.core.prefs b/p0002Subtract/.settings/org.eclipse.jdt.core.prefs[m
[1mnew file mode 100644[m
[1mindex 0000000..e256158[m
[1m--- /dev/null[m
[1m+++ b/p0002Subtract/.settings/org.eclipse.jdt.core.prefs[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32meclipse.preferences.version=1[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.targetPlatform=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve[m
[32m+[m[32morg.eclipse.jdt.core.compiler.compliance=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.lineNumber=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.localVariable=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.sourceFile=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.assertIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.enumIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.release=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.source=11[m
[1mdiff --git a/p0002Subtract/src/p0002Subtract/Main.java b/p0002Subtract/src/p0002Subtract/Main.java[m
[1mnew file mode 100644[m
[1mindex 0000000..28e78ed[m
[1m--- /dev/null[m
[1m+++ b/p0002Subtract/src/p0002Subtract/Main.java[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class provides an implementation of the simple subtract operation.[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m * @author: Leandro Rjbcn[m
[32m+[m[32m * @version: 1.0, 28/05/2020[m
[32m+[m[32m * @since: 1.0 *[m[41m [m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpackage p0002Subtract;[m
[32m+[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mpublic class Main {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m
[32m+[m		[32m// Variables[m
[32m+[m		[32mScanner scanner = new Scanner(System.in);[m
[32m+[m		[32mint firstNumber = 0;[m
[32m+[m		[32mint secondNumber = 0;[m
[32m+[m		[32mint result = 0;[m
[32m+[m
[32m+[m		[32m// Input[m
[32m+[m		[32mSystem.out.println("SUBTRACT - using integers.");[m
[32m+[m		[32mSystem.out.println("===============================================");[m
[32m+[m		[32mSystem.out.println("Number 1: ");[m
[32m+[m		[32mfirstNumber = scanner.nextInt();[m
[32m+[m		[32mSystem.out.println("Number 2: ");[m
[32m+[m		[32msecondNumber = scanner.nextInt();[m
[32m+[m
[32m+[m		[32m// Process[m
[32m+[m		[32mresult = subtract(firstNumber, secondNumber);[m
[32m+[m
[32m+[m		[32m// Output[m
[32m+[m		[32mSystem.out.println("The subtract between " + firstNumber + " and " + secondNumber + " is: " + result);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Receive two integers and return the subtract between them.[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @param a[m
[32m+[m	[32m * @param b[m
[32m+[m	[32m * @return an integer result of the subtract from a and b[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static int subtract(int a, int b) {[m
[32m+[m
[32m+[m		[32mreturn (a - b);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/p0003Multiplication/.classpath b/p0003Multiplication/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..d54800d[m
[1m--- /dev/null[m
[1m+++ b/p0003Multiplication/.classpath[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11">[m
[32m+[m		[32m<attributes>[m
[32m+[m			[32m<attribute name="module" value="true"/>[m
[32m+[m		[32m</attributes>[m
[32m+[m	[32m</classpathentry>[m
[32m+[m	[32m<classpathentry kind="src" path="src"/>[m
[32m+[m	[32m<classpathentry kind="output" path="bin"/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/p0003Multiplication/.gitignore b/p0003Multiplication/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..ae3c172[m
[1m--- /dev/null[m
[1m+++ b/p0003Multiplication/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/bin/[m
[1mdiff --git a/p0003Multiplication/.project b/p0003Multiplication/.project[m
[1mnew file mode 100644[m
[1mindex 0000000..c7fcf81[m
[1m--- /dev/null[m
[1m+++ b/p0003Multiplication/.project[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<projectDescription>[m
[32m+[m	[32m<name>p0003Multiplication</name>[m
[32m+[m	[32m<comment></comment>[m
[32m+[m	[32m<projects>[m
[32m+[m	[32m</projects>[m
[32m+[m	[32m<buildSpec>[m
[32m+[m		[32m<buildCommand>[m
[32m+[m			[32m<name>org.eclipse.jdt.core.javabuilder</name>[m
[32m+[m			[32m<arguments>[m
[32m+[m			[32m</arguments>[m
[32m+[m		[32m</buildCommand>[m
[32m+[m	[32m</buildSpec>[m
[32m+[m	[32m<natures>[m
[32m+[m		[32m<nature>org.eclipse.jdt.core.javanature</nature>[m
[32m+[m	[32m</natures>[m
[32m+[m[32m</projectDescription>[m
[1mdiff --git a/p0003Multiplication/.settings/org.eclipse.jdt.core.prefs b/p0003Multiplication/.settings/org.eclipse.jdt.core.prefs[m
[1mnew file mode 100644[m
[1mindex 0000000..e256158[m
[1m--- /dev/null[m
[1m+++ b/p0003Multiplication/.settings/org.eclipse.jdt.core.prefs[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32meclipse.preferences.version=1[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.targetPlatform=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve[m
[32m+[m[32morg.eclipse.jdt.core.compiler.compliance=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.lineNumber=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.localVariable=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.sourceFile=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.assertIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.enumIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.release=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.source=11[m
[1mdiff --git a/p0003Multiplication/src/p0003Multiplication/Main.java b/p0003Multiplication/src/p0003Multiplication/Main.java[m
[1mnew file mode 100644[m
[1mindex 0000000..25f1b85[m
[1m--- /dev/null[m
[1m+++ b/p0003Multiplication/src/p0003Multiplication/Main.java[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class provides an implementation of the simple multiplication operation.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * @author Leandro Rjbcn[m
[32m+[m[32m * @version 1.0, 29/05/2020[m
[32m+[m[32m * @since: 1.0[m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpackage p0003Multiplication;[m
[32m+[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mpublic class Main {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m
[32m+[m		[32m// Variables[m
[32m+[m		[32mScanner scanner = new Scanner(System.in);[m
[32m+[m		[32mint firstNumber = 0;[m
[32m+[m		[32mint secondNumber = 0;[m
[32m+[m		[32mint result = 0;[m
[32m+[m
[32m+[m		[32m// Input[m
[32m+[m		[32mSystem.out.println("MULTIPLICATION - using integers.");[m
[32m+[m		[32mSystem.out.println("===============================================");[m
[32m+[m		[32mSystem.out.println("Number 1: ");[m
[32m+[m		[32mfirstNumber = scanner.nextInt();[m
[32m+[m		[32mSystem.out.println("Number 2: ");[m
[32m+[m		[32msecondNumber = scanner.nextInt();[m
[32m+[m
[32m+[m		[32m// Process[m
[32m+[m		[32mresult = multiplication(firstNumber, secondNumber);[m
[32m+[m
[32m+[m		[32m// Output[m
[32m+[m		[32mSystem.out.println("The multiplication between " + firstNumber + " and " + secondNumber + " is: " + result);[m
[32m+[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Receive two integers and return the multiplication between them.[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @param a[m
[32m+[m	[32m * @param b[m
[32m+[m	[32m * @return an integer result of the multiplicaction from a and b[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static int multiplication(int a, int b) {[m
[32m+[m
[32m+[m		[32mreturn (a * b);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/p0004Division/.classpath b/p0004Division/.classpath[m
[1mnew file mode 100644[m
[1mindex 0000000..d54800d[m
[1m--- /dev/null[m
[1m+++ b/p0004Division/.classpath[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<classpath>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11">[m
[32m+[m		[32m<attributes>[m
[32m+[m			[32m<attribute name="module" value="true"/>[m
[32m+[m		[32m</attributes>[m
[32m+[m	[32m</classpathentry>[m
[32m+[m	[32m<classpathentry kind="src" path="src"/>[m
[32m+[m	[32m<classpathentry kind="output" path="bin"/>[m
[32m+[m[32m</classpath>[m
[1mdiff --git a/p0004Division/.gitignore b/p0004Division/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..ae3c172[m
[1m--- /dev/null[m
[1m+++ b/p0004Division/.gitignore[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m/bin/[m
[1mdiff --git a/p0004Division/.project b/p0004Division/.project[m
[1mnew file mode 100644[m
[1mindex 0000000..b8160ed[m
[1m--- /dev/null[m
[1m+++ b/p0004Division/.project[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<projectDescription>[m
[32m+[m	[32m<name>p0004Division</name>[m
[32m+[m	[32m<comment></comment>[m
[32m+[m	[32m<projects>[m
[32m+[m	[32m</projects>[m
[32m+[m	[32m<buildSpec>[m
[32m+[m		[32m<buildCommand>[m
[32m+[m			[32m<name>org.eclipse.jdt.core.javabuilder</name>[m
[32m+[m			[32m<arguments>[m
[32m+[m			[32m</arguments>[m
[32m+[m		[32m</buildCommand>[m
[32m+[m	[32m</buildSpec>[m
[32m+[m	[32m<natures>[m
[32m+[m		[32m<nature>org.eclipse.jdt.core.javanature</nature>[m
[32m+[m	[32m</natures>[m
[32m+[m[32m</projectDescription>[m
[1mdiff --git a/p0004Division/.settings/org.eclipse.jdt.core.prefs b/p0004Division/.settings/org.eclipse.jdt.core.prefs[m
[1mnew file mode 100644[m
[1mindex 0000000..e256158[m
[1m--- /dev/null[m
[1m+++ b/p0004Division/.settings/org.eclipse.jdt.core.prefs[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32meclipse.preferences.version=1[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.targetPlatform=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve[m
[32m+[m[32morg.eclipse.jdt.core.compiler.compliance=11[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.lineNumber=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.localVariable=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.debug.sourceFile=generate[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.assertIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.problem.enumIdentifier=error[m
[32m+[m[32morg.eclipse.jdt.core.compiler.release=enabled[m
[32m+[m[32morg.eclipse.jdt.core.compiler.source=11[m
[1mdiff --git a/p0004Division/src/p0004Division/Main.java b/p0004Division/src/p0004Division/Main.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4ebf4a6[m
[1m--- /dev/null[m
[1m+++ b/p0004Division/src/p0004Division/Main.java[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m/**[m
[32m+[m[32m * This class provides a implementation of the simple operation division.[m
[32m+[m[32m *[m[41m  [m
[32m+[m[32m * @author: Leandro Rjbcn[m
[32m+[m[32m * @version: 1.0, 30/05/2020[m
[32m+[m[32m * @since: 1.0 *[m[41m [m
[32m+[m[32m */[m
[32m+[m
[32m+[m[32mpackage p0004Division;[m
[32m+[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mpublic class Main {[m
[32m+[m
[32m+[m	[32mpublic static void main(String[] args) {[m
[32m+[m
[32m+[m		[32m// Variables[m
[32m+[m		[32mScanner scanner = new Scanner(System.in);[m
[32m+[m		[32mint firstNumber = 0;[m
[32m+[m		[32mint secondNumber = 0;[m
[32m+[m		[32mint result = 0;[m
[32m+[m
[32m+[m		[32m// Input[m
[32m+[m		[32mSystem.out.println("==============================================");[m
[32m+[m		[32mSystem.out.println("DIVISION");[m
[32m+[m		[32mSystem.out.println("The division between two integers.");[m
[32m+[m		[32mSystem.out.println("==============================================");[m
[32m+[m		[32mSystem.out.println("Number 1:");[m
[32m+[m		[32mfirstNumber = scanner.nextInt();[m
[32m+[m		[32mSystem.out.println("Number 2:");[m
[32m+[m		[32msecondNumber = scanner.nextInt();[m
[32m+[m
[32m+[m		[32m// Process[m
[32m+[m		[32mresult = division(firstNumber, secondNumber);[m
[32m+[m
[32m+[m		[32m// Output[m
[32m+[m		[32mSystem.out.println("The division between " + firstNumber + " and " + secondNumber + " is: " + result);[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m/**[m
[32m+[m	[32m * Receive two integers and return the division between them.[m
[32m+[m	[32m *[m[41m [m
[32m+[m	[32m * @param a[m
[32m+[m	[32m * @param b[m
[32m+[m	[32m * @return an integer result of the division from a and b[m
[32m+[m	[32m */[m
[32m+[m	[32mpublic static int division(int a, int b) {[m
[32m+[m
[32m+[m		[32mreturn (a / b);[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
